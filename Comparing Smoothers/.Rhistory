geom_ma(n = 2,
ma_fun = SMA,
col = "green",
linetype = 1) +
labs(x = "x",
y = "y",
title = "How Does a Exponential Moving Average Fit the Friedman Formula?",
subtitle = "Better! But still poorly.",
caption = paste0("Graph shows how an Exponential Moving Average, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08)). \n There are only 2 observations in each bin.")) -> gg_ema
ggsave(gg_ema,
height = 10,
width = 10,
device = "jpeg",
file = "./Plots/ema.jpeg")
# Expoential moving average.
gg_base +
# plot the smoothed data points
geom_ma(n = 2,
ma_fun = SMA,
col = "green",
linetype = 1) +
labs(x = "x",
y = "y",
title = "How Does an Exponential Moving Average Fit the Friedman Formula?",
subtitle = "Better! But still poorly.",
caption = paste0("Graph shows how an Exponential Moving Average, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08)). \n There are only 2 observations in each bin.")) -> gg_ema
ggsave(gg_ema,
height = 10,
width = 10,
dpi = 300,
device = "jpeg",
file = "./Plots/ema.jpeg")
gg_base +
# plot the smoothed data points
geom_ma(n = 2,
ma_fun = SMA,
col = "green",
linetype = 1)+
labs(x = "x",
y = "y",
title = "How Does a Simple Moving Average Fit the Friedman Formula?",
subtitle = "Poorly!",
caption = paste0("Graph shows how a Simple Moving Average, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08)). \n There are only 2 observations in each bin.")) -> gg_sma
ggsave(gg_sma,
height = 10,
width = 10,
dpi = 250,
device = "jpeg",
file = "./Plots/sma.jpeg")
ggsave(gg_ema,
height = 10,
width = 10,
dpi = 275,
device = "jpeg",
file = "./Plots/ema.jpeg")
# Expoential moving average.
gg_base +
# plot the smoothed data points
geom_ma(n = 2,
ma_fun = EMA,
col = "green",
linetype = 1) +
labs(x = "x",
y = "y",
title = "How Does an Exponential Moving Average Fit the Friedman Formula?",
subtitle = "Better! But still poorly.",
caption = paste0("Graph shows how an Exponential Moving Average, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08)). \n There are only 2 observations in each bin.")) -> gg_ema
gg_base +
# plot the smoothed data points
geom_ma(n = 2,
ma_fun = SMA,
col = "green",
linetype = 1)+
labs(x = "x",
y = "y",
title = "How Does a Simple Moving Average Fit the Friedman Formula?",
subtitle = "Poorly!",
caption = paste0("Graph shows how a Simple Moving Average, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08)). \n There are only 2 observations in each bin.")) -> gg_sma
ggsave(gg_sma,
height = 10,
width = 10,
dpi = 250,
device = "jpeg",
file = "./Plots/sma.jpeg")
# Expoential moving average.
gg_base +
# plot the smoothed data points
geom_ma(n = 2,
ma_fun = EMA,
col = "green",
linetype = 1) +
labs(x = "x",
y = "y",
title = "How Does an Exponential Moving Average Fit the Friedman Formula?",
subtitle = "Better! But still poorly.",
caption = paste0("Graph shows how an Exponential Moving Average, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08)). \n There are only 2 observations in each bin.")) -> gg_ema
ggsave(gg_ema,
height = 10,
width = 10,
dpi = 275,
device = "jpeg",
file = "./Plots/ema.jpeg")
gg_base +
# plot the smoothed data points
geom_smooth(method = "gam",
formula = y ~ s(x, bs = "cs"),
col = "green",
span = .5) +
labs(x = "x",
y = "y",
title = "How Does a Wigglier Loess Smoother Fit to the Friedman Formula?",
subtitle = "Better!",
caption = paste0("Graph shows how Loess with 50% span, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08)).")) -> gg_loess_wig
gg_loess_wig
gg_base +
# plot the smoothed data points
geom_smooth(method = "gam",
formula = y ~ s(x, bs = "cs"),
col = "green",
span = .5) +
labs(x = "x",
y = "y",
title = "How Does a Wigglier Loess Smoother Fit to the Friedman Formula?",
subtitle = "Better!",
caption = paste0("Graph shows how Loess with 50% span, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08))."))
gg_base +
# plot the smoothed data points
geom_smooth(method = "gam",
formula = y ~ s(x, bs = "cs"),
col = "green") +
labs(x = "x",
y = "y",
title = "How Does a Wigglier Loess Smoother Fit to the Friedman Formula?",
subtitle = "Better!",
caption = paste0("Graph shows how Loess with 50% span, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08))."))
gg_base +
# plot the smoothed data points
geom_smooth(method = "gam",
formula = y ~ s(x, bs = "cs"),
col = "green") +
labs(x = "x",
y = "y",
title = "How Does a ""Generalized Additive Models With Integrated Smoothness Estimation""
Fit to the Friedman Formula?",
subtitle = "Better!",
caption = paste0("Graph shows how Loess with 50% span, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08))."))
gg_base +
# plot the smoothed data points
geom_smooth(method = "gam",
formula = y ~ s(x, bs = "cs"),
col = "green") +
labs(x = "x",
y = "y",
title = "How Does a ""Generalized Additive Models With Integrated Smoothness Estimation"" Fit to the Friedman Formula?",
subtitle = "Better!",
caption = paste0("Graph shows how Loess with 50% span, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08))."))
gg_base +
# plot the smoothed data points
geom_smooth(method = "gam",
formula = y ~ s(x, bs = "cs"),
col = "green") +
labs(x = "x",
y = "y",
title = "How Does a ""Generalized Additive Models With Integrated Smoothness Estimation"" Fit to the Friedman Formula?",
subtitle = "Better!",
caption = paste0("Graph shows how Loess with 50% span, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08))."))
plot_grid(gg_sma,
gg_ema,
labels = "AUTO")
require(cowplot)
install.packages("cowplot")
library(cowplot)
plot_grid(gg_sma,
gg_ema,
labels = "AUTO")
plot_grid(gg_sma,
gg_ema,
labels = "AUTO") -> gg_ema_sma
ggplot2::ggsave(gg_ema_sma,
height = 15,
width = 15,
dpi = 275,
device = "jpeg",
file = "./Plots/sma_ema.jpeg")
ggplot2::ggsave(gg_ema_sma,
height = 15,
width = 20,
dpi = 275,
device = "jpeg",
file = "./Plots/sma_ema.jpeg")
plot_grid(gg_loess_d,
gg_loess_wig,
labels = "AUTO") -> gg_loesses
gg_loesses
ggplot2::ggsave(gg_loesses,
height = 15,
width = 20,
dpi = 275,
device = "jpeg",
file = "./Plots/loesses.jpeg")
gg_base +
# plot the smoothed data points
geom_smooth(method = "gam",
formula = y ~ s(x, bs = "cs"),
col = "green") +
labs(x = "x",
y = "y",
title = "How Does a Generalized Additive Models With Integrated Smoothness Estimation Fit to the Friedman Formula?",
subtitle = "Better!",
caption = paste0("Graph shows how Loess with 50% span, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08)).")) -> gg_gam
gg_base +
# plot the smoothed data points
geom_smooth(method = "gam",
formula = y ~ s(x, bs = "cs"),
col = "green") +
labs(x = "x",
y = "y",
title = "How Does a Generalized Additive Models With Integrated Smoothness Estimation Fit to the Friedman Formula?",
subtitle = "Better!",
caption = paste0("Graph shows how Loess with 50% span, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08)).")) -> gg_gam
gg_gam
ggplot2::ggsave(gg_loesses,
height = 15,
width = 20,
dpi = 200,
device = "jpeg",
file = "./Plots/loesses.jpeg")
ggplot2::ggsave(gg_loesses,
height = 15,
width = 20,
dpi = 220,
device = "jpeg",
file = "./Plots/loesses.jpeg")
ggplot2::ggsave(gg_ema_sma,
height = 15,
width = 20,
dpi = 220,
device = "jpeg",
file = "./Plots/sma_ema.jpeg")
ggplot2::ggsave(gg_ema_sma,
height = 15,
width = 20,
dpi = 200,
device = "jpeg",
file = "./Plots/sma_ema.jpeg")
ggplot2::ggsave(gg_ema_sma,
height = 15,
width = 20,
dpi = 175,
device = "jpeg",
file = "./Plots/sma_ema.jpeg")
ggplot2::ggsave(gg_ema_sma,
height = 15,
width = 20,
dpi = 170,
device = "jpeg",
file = "./Plots/sma_ema.jpeg")
ggplot2::ggsave(gg_ema_sma,
height = 15,
width = 20,
dpi = 165,
device = "jpeg",
file = "./Plots/sma_ema.jpeg")
gg_base +
# plot the smoothed data points
geom_smooth(method = "gam",
formula = y ~ s(x, bs = "cs"),
col = "green") +
labs(x = "x",
y = "y",
title = "How Does a Generalized Additive Model With Integrated Smoothness Estimation Fit to the Friedman Formula?",
subtitle = "Better!",
caption = paste0("Graph shows how a Generalized Additive Model With Integrated Smoothness Estimation, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08)).")) -> gg_gam
ggsave(gg_gam,
height = 10,
width = 10,
device = "jpeg",
file = "./Plots/gam.jpeg")
ggsave(gg_gam,
height = 10,
width = 10,
dpi = 330,
device = "jpeg",
file = "./Plots/gam.jpeg")
ggsave(gg_gam,
height = 10,
width = 15,
dpi = 330,
device = "jpeg",
file = "./Plots/gam.jpeg")
gg_base +
# plot the smoothed data points
geom_smooth(method = "gam",
formula = y ~ s(x, bs = "cs"),
col = "green") +
labs(x = "x",
y = "y",
title = "How Does a Generalized Additive Model With Integrated Smoothness Estimation Fit to the Friedman Formula?",
subtitle = "Well!",
caption = paste0("Graph shows how a Generalized Additive Model With Integrated Smoothness Estimation, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08)).")) -> gg_gam
ggsave(gg_gam,
height = 10,
width = 15,
dpi = 330,
device = "jpeg",
file = "./Plots/gam.jpeg")
gg_base +
# plot the smoothed data points
geom_density()
gg_base
?geom_density()
gg_base +
# plot the smoothed data points
geom_density()
gg_base +
# plot the smoothed data points
stat_density()
gg_base +
# plot the smoothed data points
stat_density(n = 2)
gg_base +
# plot the smoothed data points
stat_density(n = 2 aes(y = y ))
####################
## Kernel Density ##
####################
gg_base +
# plot the smoothed data points
stat_density(aes(y = y ))
####################
## Kernel Density ##
####################
gg_base +
# plot the smoothed data points
stat_density(n = 2, aes(y = y ))
####################
## Kernel Density ##
####################
gg_base +
# plot the smoothed data points
stat_density(n = 2, aes(y = y ))
####################
## Kernel Density ##
####################
gg_base +
# plot the smoothed data points
geom_density(n = 2, aes(y = y ))
ggplot(data = df,
aes(x = x, y = y)) +
# plot the smoothed data points
geom_density(n = 2, aes(y = y ))
ggplot(data = df,
aes(x = x, y = y)) +
# plot the smoothed data points
geom_density()
####################
## Kernel Density ##
####################
ggplot(data = df,
aes(x = x, y = y)) +
# plot the smoothed data points
stat_density()
?spline
df
spline(df, n = 10)
ggplot(data = df,
aes(x = x, y = y)) +
# plot the smoothed data points
geom_line(data = data.frame(spline(df, n = 10)))
ggplot(data = df,
aes(x = x, y = y)) +
# plot the smoothed data points
geom_line(data = data.frame(spline(df, n = 5)))
ggplot(data = df,
aes(x = x, y = y)) +
# plot the smoothed data points
geom_line(data = data.frame(spline(df, n = 100)))
ggplot(data = df,
aes(x = x, y = y)) +
# plot the smoothed data points
geom_line(data = data.frame(spline(df, n = n)))
ggplot(data = df,
aes(x = x, y = y)) +
# plot the smoothed data points
geom_line(data = data.frame(spline(df, n = 10000)))
####################
## Spline ##
####################
ggplot(data = df,
aes(x = x, y = y)) +
# plot the spline
geom_line(data = data.frame(spline(df, n = n)),
col = "green") +
labs(x = "x",
y = "y",
title = "How Does a Spline Fit to the Friedman Formula?",
subtitle = "Well!",
caption = paste0("Graph shows how a Spline, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08)).")) -> gg_gam
gg_gam
####################
## Spline ##
####################
gg_base +
# plot the spline
geom_line(data = data.frame(spline(df, n = n)),
col = "green") +
labs(x = "x",
y = "y",
title = "How Does a Spline Fit to the Friedman Formula?",
subtitle = "Well!",
caption = paste0("Graph shows how a Spline, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08)).")) -> gg_gam
####################
## Spline ##
####################
gg_base +
# plot the spline
geom_line(data = data.frame(spline(df, n = n)),
col = "green") +
labs(x = "x",
y = "y",
title = "How Does a Spline Fit to the Friedman Formula?",
subtitle = "Well!",
caption = paste0("Graph shows how a Spline, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08)).")) -> gg_spline
gg_spline
####################
## Spline ##
####################
gg_base +
# plot the spline
geom_line(data = data.frame(spline(df, n = 250)),
col = "green") +
labs(x = "x",
y = "y",
title = "How Does a Spline Fit to the Friedman Formula?",
subtitle = "Well!",
caption = paste0("Graph shows how a Spline, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08)).")) -> gg_spline
####################
## Spline ##
####################
gg_base +
# plot the spline
geom_line(data = data.frame(spline(df, n = 250)),
col = "green") +
labs(x = "x",
y = "y",
title = "How Does a Spline Fit to the Friedman Formula?",
subtitle = "Well!",
caption = paste0("Graph shows how a Spline, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08)).")) -> gg_spline
gg_spline
?spline
gg_spline
####################
## Spline ##
####################
gg_base +
# plot the spline
geom_line(data = data.frame(?spline(df, n = 250)),
col = "green") +
labs(x = "x",
y = "y",
title = "How Does a Spline Fit to the Friedman Formula?",
subtitle = "Well!",
caption = paste0("Graph shows how a Spline, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08)). \n The spline is interpolated at 500 equally n spaced points spanning the interval of x, using the default method: \n 'Forsythe, Malcolm and Moler (an exact cubic is fitted through the four points at each end of the data, \n and this is used to determine the end conditions'")) -> gg_spline
####################
## Spline ##
####################
gg_base +
# plot the spline
geom_line(data = data.frame(spline(df, n = 250)),
col = "green") +
labs(x = "x",
y = "y",
title = "How Does a Spline Fit to the Friedman Formula?",
subtitle = "Well!",
caption = paste0("Graph shows how a Spline, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08)). \n The spline is interpolated at 500 equally n spaced points spanning the interval of x, using the default method: \n 'Forsythe, Malcolm and Moler (an exact cubic is fitted through the four points at each end of the data, \n and this is used to determine the end conditions'")) -> gg_spline
gg_spline
####################
## Spline ##
####################
gg_base +
# plot the spline
geom_line(data = data.frame(spline(df, n = 250)),
col = "green") +
labs(x = "x",
y = "y",
title = "How Does a Cubic Spline Fit the Friedman Formula?",
subtitle = "Well!",
caption = paste0("Graph shows how a Spline, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08)). \n The spline is interpolated at 500 equally n spaced points spanning the interval of x, using the default method: \n 'Forsythe, Malcolm and Moler (an exact cubic is fitted through the four points at each end of the data, \n and this is used to determine the end conditions'")) -> gg_spline
ggsave(gg_spline,
height = 10,
width = 15,
dpi = 330,
device = "jpeg",
file = "./Plots/spline n.jpeg")
####################
## Spline ##
####################
gg_base +
# plot the spline
geom_line(data = data.frame(spline(df, n = 250)),
col = "green") +
labs(x = "x",
y = "y",
title = "How Does a Cubic Spline Fit the Friedman Formula?",
subtitle = "Well!",
caption = paste0("Graph shows how a Spline, the green line, \n approximates the underlying Friedman formula, the red line, using ", n, " data points \n jittered about the Friedman formula (by 8% in positive and negative directions (width = .08)). \n The spline is interpolated at 500 equally spaced points spanning the interval of x, using the default method of stats::spline(): \n fnn or 'Forsythe, Malcolm and Moler (an exact cubic is fitted through the four points at each end of the data, \n and this is used to determine the end conditions'")) -> gg_spline
ggsave(gg_spline,
height = 10,
width = 15,
dpi = 330,
device = "jpeg",
file = "./Plots/spline n.jpeg")
